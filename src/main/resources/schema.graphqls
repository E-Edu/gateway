type Query {

    # Generic

    serviceInfoByName(name: String): Service

    # Task

    taskById(taskId: Int): Task

    taskTypeById(taskId: Int): TaskType

    subjectById(subjectId: Int): Subject

    moduleById(moduleId: Int): Module

    lectureById(lectureId: Int): Lecture

    difficultyById(difficultyId: Int): Difficulty

    # User

    userByUserId(userId: ID): User

    userByUserName(firstName: String, lastName: String): User

    userByEmail(email: String): User

    # Ticket

    ticketByTicketId(ticketId: Int): Ticket

}

type Mutation {

    # User

    authenticate(userAuth: UserAuth): Boolean

}

# ================ Generic ================
scalar Long

type Service {
    name: String
    version: String
    commit: String
    buildTime: Long
}

# ================ Task MicroService ================

type Task {
    taskId: Int
    task: String
    author: User
    necessaryPoints: Int
    taskType: TaskType
    lecture: Lecture
    difficulty: Difficulty
}

type TaskType {
    taskTypeId: Int
    displayName: String
}

type Subject {
    subjectId: Int
    displayName: String
}

type Module {
    moduleId: Int
    displayName: String
    subject: Subject
}

type Lecture {
    lectureId: Int
    displayName: String
    module: Module
}

type Difficulty {
    difficultyId: Int
    displayName: String
}

# ================ User MicroService ================

type User {
    userId: ID # UUID
    firstName: String
    lastName: String
    createdAt: String # Unix timestamp Â» Millis UTC
    email: String
    role: Int
    status: Int
}

input UserAuth {
    passwordHash: String # PBKDF2 (3k rounds) encrypted password
    key: String # Email or Username
}

enum UserAuthResult {
    USER_NOT_FOUND,
    AUTHENTICATION_FAILED, # Password wrong, banned, too many request...
    MAINTENANCE
}

# ================ Report MicroService ================

type Ticket {
    ticketId: Int
    task: Task
    title: String
    description: String
    ticketType: TicketType
}

enum TicketType
